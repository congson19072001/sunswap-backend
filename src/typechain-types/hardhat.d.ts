/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "FactoryAssembly",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FactoryAssembly__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ISunSwapCallee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISunSwapCallee__factory>;
    getContractFactory(
      name: "ISunSwapERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISunSwapERC20__factory>;
    getContractFactory(
      name: "ISunSwapFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISunSwapFactory__factory>;
    getContractFactory(
      name: "ISunSwapPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISunSwapPair__factory>;
    getContractFactory(
      name: "SunSwapERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SunSwapERC20__factory>;
    getContractFactory(
      name: "SunSwapFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SunSwapFactory__factory>;
    getContractFactory(
      name: "SunSwapPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SunSwapPair__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;

    getContractAt(
      name: "FactoryAssembly",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FactoryAssembly>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ISunSwapCallee",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISunSwapCallee>;
    getContractAt(
      name: "ISunSwapERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISunSwapERC20>;
    getContractAt(
      name: "ISunSwapFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISunSwapFactory>;
    getContractAt(
      name: "ISunSwapPair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISunSwapPair>;
    getContractAt(
      name: "SunSwapERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SunSwapERC20>;
    getContractAt(
      name: "SunSwapFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SunSwapFactory>;
    getContractAt(
      name: "SunSwapPair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SunSwapPair>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
